{"ast":null,"code":"import * as Curry from \"./curry.js\";\nvar stdout =\n/* record */\n[\n/* buffer */\n\"\",\n/* output */\nfunction (param, s) {\n  var v = s.length - 1 | 0;\n\n  if (typeof process !== \"undefined\" && process.stdout && process.stdout.write) {\n    return process.stdout.write(s);\n  } else if (s[v] === \"\\n\") {\n    console.log(s.slice(0, v));\n    return (\n      /* () */\n      0\n    );\n  } else {\n    console.log(s);\n    return (\n      /* () */\n      0\n    );\n  }\n}];\nvar stderr =\n/* record */\n[\n/* buffer */\n\"\",\n/* output */\nfunction (param, s) {\n  var v = s.length - 1 | 0;\n\n  if (s[v] === \"\\n\") {\n    console.log(s.slice(0, v));\n    return (\n      /* () */\n      0\n    );\n  } else {\n    console.log(s);\n    return (\n      /* () */\n      0\n    );\n  }\n}];\n\nfunction caml_ml_flush(oc) {\n  if (oc[\n  /* buffer */\n  0] !== \"\") {\n    Curry._2(oc[\n    /* output */\n    1], oc, oc[\n    /* buffer */\n    0]);\n\n    oc[\n    /* buffer */\n    0] = \"\";\n    return (\n      /* () */\n      0\n    );\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n\n  if (typeof process !== \"undefined\" && process.stdout && process.stdout.write && oc === stdout) {\n    return process.stdout.write(str$1);\n  } else {\n    var id = str$1.lastIndexOf(\"\\n\");\n\n    if (id < 0) {\n      oc[\n      /* buffer */\n      0] = oc[\n      /* buffer */\n      0] + str$1;\n      return (\n        /* () */\n        0\n      );\n    } else {\n      oc[\n      /* buffer */\n      0] = oc[\n      /* buffer */\n      0] + str$1.slice(0, id + 1 | 0);\n      caml_ml_flush(oc);\n      oc[\n      /* buffer */\n      0] = oc[\n      /* buffer */\n      0] + str$1.slice(id + 1 | 0);\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_out_channels_list(param) {\n  return (\n    /* :: */\n    [stdout,\n    /* :: */\n    [stderr,\n    /* [] */\n    0]]\n  );\n}\n\nvar stdin = undefined;\nexport { stdin, stdout, stderr, caml_ml_flush, caml_ml_output, caml_ml_output_char, caml_ml_out_channels_list };\n/* No side effect */","map":{"version":3,"sources":["/Users/bg/benzguo/memopub/node_modules/bs-platform/lib/es6/caml_io.js"],"names":["Curry","stdout","param","s","v","length","process","write","console","log","slice","stderr","caml_ml_flush","oc","_2","caml_ml_output","str","offset","len","str$1","id","lastIndexOf","caml_ml_output_char","$$char","String","fromCharCode","caml_ml_out_channels_list","stdin","undefined"],"mappings":"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","sourcesContent":["\n\nimport * as Curry from \"./curry.js\";\n\nvar stdout = /* record */[\n  /* buffer */\"\",\n  /* output */(function (param, s) {\n      var v = s.length - 1 | 0;\n      if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write)) {\n        return ( process.stdout.write )(s);\n      } else if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return /* () */0;\n      } else {\n        console.log(s);\n        return /* () */0;\n      }\n    })\n];\n\nvar stderr = /* record */[\n  /* buffer */\"\",\n  /* output */(function (param, s) {\n      var v = s.length - 1 | 0;\n      if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return /* () */0;\n      } else {\n        console.log(s);\n        return /* () */0;\n      }\n    })\n];\n\nfunction caml_ml_flush(oc) {\n  if (oc[/* buffer */0] !== \"\") {\n    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);\n    oc[/* buffer */0] = \"\";\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n  if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write ) && oc === stdout) {\n    return ( process.stdout.write )(str$1);\n  } else {\n    var id = str$1.lastIndexOf(\"\\n\");\n    if (id < 0) {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1;\n      return /* () */0;\n    } else {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);\n      caml_ml_flush(oc);\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);\n      return /* () */0;\n    }\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_out_channels_list(param) {\n  return /* :: */[\n          stdout,\n          /* :: */[\n            stderr,\n            /* [] */0\n          ]\n        ];\n}\n\nvar stdin = undefined;\n\nexport {\n  stdin ,\n  stdout ,\n  stderr ,\n  caml_ml_flush ,\n  caml_ml_output ,\n  caml_ml_output_char ,\n  caml_ml_out_channels_list ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}