{"ast":null,"code":"import * as Caml_int32 from \"./caml_int32.js\";\nimport * as Caml_int64 from \"./caml_int64.js\";\nimport * as Caml_utils from \"./caml_utils.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c -\n    /* \"0\" */\n    48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case 0:\n      return 8;\n\n    case 1:\n      return 16;\n\n    case 2:\n      return 10;\n\n    case 3:\n      return 2;\n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base =\n  /* Dec */\n  2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n\n  switch (match) {\n    case 43:\n      i = i + 1 | 0;\n      break;\n\n    case 44:\n      break;\n\n    case 45:\n      sign = -1;\n      i = i + 1 | 0;\n      break;\n\n    default:\n  }\n\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0:\n              base =\n              /* Oct */\n              0;\n              i = i + 2 | 0;\n              break;\n\n            case 6:\n              i = i + 2 | 0;\n              break;\n\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 7:\n            case 8:\n              break;\n\n            case 9:\n              base =\n              /* Hex */\n              1;\n              i = i + 2 | 0;\n              break;\n          }\n        }\n      } else if (match$1 === 98) {\n        base =\n        /* Bin */\n        3;\n        i = i + 2 | 0;\n      }\n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0:\n            base =\n            /* Oct */\n            0;\n            i = i + 2 | 0;\n            break;\n\n          case 6:\n            i = i + 2 | 0;\n            break;\n\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 7:\n          case 8:\n            break;\n\n          case 9:\n            base =\n            /* Hex */\n            1;\n            i = i + 2 | 0;\n            break;\n        }\n      }\n    } else {\n      base =\n      /* Bin */\n      3;\n      i = i + 2 | 0;\n    }\n  }\n\n  return (\n    /* tuple */\n    [i, sign, base]\n  );\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = parse_digit(c);\n\n  if (d < 0 || d >= base) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  var aux = function (_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n\n        if (a ===\n        /* \"_\" */\n        95) {\n          _k = k + 1 | 0;\n          continue;\n        } else {\n          var v = parse_digit(a);\n\n          if (v < 0 || v >= base) {\n            throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n          } else {\n            var acc$1 = base * acc + v;\n\n            if (acc$1 > threshold) {\n              throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n            } else {\n              _k = k + 1 | 0;\n              _acc = acc$1;\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    ;\n  };\n\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n\n  if (base === 10 && res !== or_res) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n\n  switch (hbase) {\n    case 0:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      536870911,\n      /* lo */\n      4294967295];\n      break;\n\n    case 1:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      268435455,\n      /* lo */\n      4294967295];\n      break;\n\n    case 2:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      429496729,\n      /* lo */\n      2576980377];\n      break;\n\n    case 3:\n      threshold =\n      /* int64 */\n      [\n      /* hi */\n      2147483647,\n      /* lo */\n      4294967295];\n      break;\n  }\n\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n\n  if (Caml_int64.lt(d,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0]) || Caml_int64.ge(d, base)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  var aux = function (_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n\n        if (a ===\n        /* \"_\" */\n        95) {\n          _k = k + 1 | 0;\n          continue;\n        } else {\n          var v = Caml_int64.of_int32(parse_digit(a));\n\n          if (Caml_int64.lt(v,\n          /* int64 */\n          [\n          /* hi */\n          0,\n          /* lo */\n          0]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n            throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n          } else {\n            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n            _k = k + 1 | 0;\n            _acc = acc$1;\n            continue;\n          }\n        }\n      }\n    }\n\n    ;\n  };\n\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0]);\n\n  if (Caml_int64.eq(base,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  10]) && Caml_int64.neq(res, or_res)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case 0:\n      return 8;\n\n    case 1:\n      return 16;\n\n    case 2:\n      return 10;\n  }\n}\n\nfunction lowercase(c) {\n  if (c >=\n  /* \"A\" */\n  65 && c <=\n  /* \"Z\" */\n  90 || c >=\n  /* \"\\192\" */\n  192 && c <=\n  /* \"\\214\" */\n  214 || c >=\n  /* \"\\216\" */\n  216 && c <=\n  /* \"\\222\" */\n  222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n\n  if (len > 31) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"format_int: format too long\"];\n  }\n\n  var f =\n  /* record */\n  [\n  /* justify */\n  \"+\",\n  /* signstyle */\n  \"-\",\n  /* filter */\n  \" \",\n  /* alternate */\n  false,\n  /* base : Dec */\n  2,\n  /* signedconv */\n  false,\n  /* width */\n  0,\n  /* uppercase */\n  false,\n  /* sign */\n  1,\n  /* prec */\n  -1,\n  /* conv */\n  \"f\"];\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n\n    if (i >= len) {\n      return f;\n    } else {\n      var c = fmt.charCodeAt(i);\n      var exit = 0;\n\n      if (c >= 69) {\n        if (c >= 88) {\n          if (c >= 121) {\n            exit = 1;\n          } else {\n            switch (c - 88 | 0) {\n              case 0:\n                f[\n                /* base */\n                4] =\n                /* Hex */\n                1;\n                f[\n                /* uppercase */\n                7] = true;\n                _i = i + 1 | 0;\n                continue;\n\n              case 13:\n              case 14:\n              case 15:\n                exit = 5;\n                break;\n\n              case 12:\n              case 17:\n                exit = 4;\n                break;\n\n              case 23:\n                f[\n                /* base */\n                4] =\n                /* Oct */\n                0;\n                _i = i + 1 | 0;\n                continue;\n\n              case 29:\n                f[\n                /* base */\n                4] =\n                /* Dec */\n                2;\n                _i = i + 1 | 0;\n                continue;\n\n              case 1:\n              case 2:\n              case 3:\n              case 4:\n              case 5:\n              case 6:\n              case 7:\n              case 8:\n              case 9:\n              case 10:\n              case 11:\n              case 16:\n              case 18:\n              case 19:\n              case 20:\n              case 21:\n              case 22:\n              case 24:\n              case 25:\n              case 26:\n              case 27:\n              case 28:\n              case 30:\n              case 31:\n                exit = 1;\n                break;\n\n              case 32:\n                f[\n                /* base */\n                4] =\n                /* Hex */\n                1;\n                _i = i + 1 | 0;\n                continue;\n            }\n          }\n        } else if (c >= 72) {\n          exit = 1;\n        } else {\n          f[\n          /* signedconv */\n          5] = true;\n          f[\n          /* uppercase */\n          7] = true;\n          f[\n          /* conv */\n          10] = String.fromCharCode(lowercase(c));\n          _i = i + 1 | 0;\n          continue;\n        }\n      } else {\n        switch (c) {\n          case 35:\n            f[\n            /* alternate */\n            3] = true;\n            _i = i + 1 | 0;\n            continue;\n\n          case 32:\n          case 43:\n            exit = 2;\n            break;\n\n          case 45:\n            f[\n            /* justify */\n            0] = \"-\";\n            _i = i + 1 | 0;\n            continue;\n\n          case 46:\n            f[\n            /* prec */\n            9] = 0;\n            var j = i + 1 | 0;\n\n            while (function (j) {\n              return function () {\n                var w = fmt.charCodeAt(j) -\n                /* \"0\" */\n                48 | 0;\n                return w >= 0 && w <= 9;\n              };\n            }(j)()) {\n              f[\n              /* prec */\n              9] = (Caml_int32.imul(f[\n              /* prec */\n              9], 10) + fmt.charCodeAt(j) | 0) -\n              /* \"0\" */\n              48 | 0;\n              j = j + 1 | 0;\n            }\n\n            ;\n            _i = j;\n            continue;\n\n          case 33:\n          case 34:\n          case 36:\n          case 37:\n          case 38:\n          case 39:\n          case 40:\n          case 41:\n          case 42:\n          case 44:\n          case 47:\n            exit = 1;\n            break;\n\n          case 48:\n            f[\n            /* filter */\n            2] = \"0\";\n            _i = i + 1 | 0;\n            continue;\n\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n            exit = 3;\n            break;\n\n          default:\n            exit = 1;\n        }\n      }\n\n      switch (exit) {\n        case 1:\n          _i = i + 1 | 0;\n          continue;\n\n        case 2:\n          f[\n          /* signstyle */\n          1] = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue;\n\n        case 3:\n          f[\n          /* width */\n          6] = 0;\n          var j$1 = i;\n\n          while (function (j$1) {\n            return function () {\n              var w = fmt.charCodeAt(j$1) -\n              /* \"0\" */\n              48 | 0;\n              return w >= 0 && w <= 9;\n            };\n          }(j$1)()) {\n            f[\n            /* width */\n            6] = (Caml_int32.imul(f[\n            /* width */\n            6], 10) + fmt.charCodeAt(j$1) | 0) -\n            /* \"0\" */\n            48 | 0;\n            j$1 = j$1 + 1 | 0;\n          }\n\n          ;\n          _i = j$1;\n          continue;\n\n        case 4:\n          f[\n          /* signedconv */\n          5] = true;\n          f[\n          /* base */\n          4] =\n          /* Dec */\n          2;\n          _i = i + 1 | 0;\n          continue;\n\n        case 5:\n          f[\n          /* signedconv */\n          5] = true;\n          f[\n          /* conv */\n          10] = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue;\n      }\n    }\n  }\n\n  ;\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config[\n  /* justify */\n  0];\n  var signstyle = config[\n  /* signstyle */\n  1];\n  var filter = config[\n  /* filter */\n  2];\n  var alternate = config[\n  /* alternate */\n  3];\n  var base = config[\n  /* base */\n  4];\n  var signedconv = config[\n  /* signedconv */\n  5];\n  var width = config[\n  /* width */\n  6];\n  var uppercase = config[\n  /* uppercase */\n  7];\n  var sign = config[\n  /* sign */\n  8];\n  var len = rawbuffer.length;\n\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n\n  if (alternate) {\n    if (base ===\n    /* Oct */\n    0) {\n      len = len + 1 | 0;\n    } else if (base ===\n    /* Hex */\n    1) {\n      len = len + 2 | 0;\n    }\n  }\n\n  var buffer = \"\";\n\n  if (justify === \"+\" && filter === \" \") {\n    for (var i = len, i_finish = width - 1 | 0; i <= i_finish; ++i) {\n      buffer = buffer + filter;\n    }\n  }\n\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n  }\n\n  if (alternate && base ===\n  /* Oct */\n  0) {\n    buffer = buffer + \"0\";\n  }\n\n  if (alternate && base ===\n  /* Hex */\n  1) {\n    buffer = buffer + \"0x\";\n  }\n\n  if (justify === \"+\" && filter === \"0\") {\n    for (var i$1 = len, i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1) {\n      buffer = buffer + filter;\n    }\n  }\n\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n\n  if (justify === \"-\") {\n    for (var i$2 = len, i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2) {\n      buffer = buffer + \" \";\n    }\n  }\n\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  } else {\n    var f = parse_format(fmt);\n    var f$1 = f;\n    var i$1 = i;\n    var i$2 = i$1 < 0 ? f$1[\n    /* signedconv */\n    5] ? (f$1[\n    /* sign */\n    8] = -1, -i$1) : i$1 >>> 0 : i$1;\n    var s = i$2.toString(int_of_base(f$1[\n    /* base */\n    4]));\n\n    if (f$1[\n    /* prec */\n    9] >= 0) {\n      f$1[\n      /* filter */\n      2] = \" \";\n      var n = f$1[\n      /* prec */\n      9] - s.length | 0;\n\n      if (n > 0) {\n        s = Caml_utils.repeat(n, \"0\") + s;\n      }\n    }\n\n    return finish_formatting(f$1, s);\n  }\n}\n\nfunction caml_int64_format(fmt, x) {\n  var f = parse_format(fmt);\n  var x$1 = f[\n  /* signedconv */\n  5] && Caml_int64.lt(x,\n  /* int64 */\n  [\n  /* hi */\n  0,\n  /* lo */\n  0]) ? (f[\n  /* sign */\n  8] = -1, Caml_int64.neg(x)) : x;\n  var s = \"\";\n  var match = f[\n  /* base */\n  4];\n\n  switch (match) {\n    case 0:\n      var wbase =\n      /* int64 */\n      [\n      /* hi */\n      0,\n      /* lo */\n      8];\n      var cvtbl = \"01234567\";\n\n      if (Caml_int64.lt(x$1,\n      /* int64 */\n      [\n      /* hi */\n      0,\n      /* lo */\n      0])) {\n        var y = Caml_int64.discard_sign(x$1);\n        var match$1 = Caml_int64.div_mod(y, wbase);\n        var quotient = Caml_int64.add(\n        /* int64 */\n        [\n        /* hi */\n        268435456,\n        /* lo */\n        0], match$1[0]);\n        var modulus = match$1[1];\n        s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n\n        while (Caml_int64.neq(quotient,\n        /* int64 */\n        [\n        /* hi */\n        0,\n        /* lo */\n        0])) {\n          var match$2 = Caml_int64.div_mod(quotient, wbase);\n          quotient = match$2[0];\n          modulus = match$2[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n        }\n\n        ;\n      } else {\n        var match$3 = Caml_int64.div_mod(x$1, wbase);\n        var quotient$1 = match$3[0];\n        var modulus$1 = match$3[1];\n        s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n\n        while (Caml_int64.neq(quotient$1,\n        /* int64 */\n        [\n        /* hi */\n        0,\n        /* lo */\n        0])) {\n          var match$4 = Caml_int64.div_mod(quotient$1, wbase);\n          quotient$1 = match$4[0];\n          modulus$1 = match$4[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n        }\n\n        ;\n      }\n\n      break;\n\n    case 1:\n      s = Caml_int64.to_hex(x$1) + s;\n      break;\n\n    case 2:\n      var wbase$1 =\n      /* int64 */\n      [\n      /* hi */\n      0,\n      /* lo */\n      10];\n      var cvtbl$1 = \"0123456789\";\n\n      if (Caml_int64.lt(x$1,\n      /* int64 */\n      [\n      /* hi */\n      0,\n      /* lo */\n      0])) {\n        var y$1 = Caml_int64.discard_sign(x$1);\n        var match$5 = Caml_int64.div_mod(y$1, wbase$1);\n        var match$6 = Caml_int64.div_mod(Caml_int64.add(\n        /* int64 */\n        [\n        /* hi */\n        0,\n        /* lo */\n        8], match$5[1]), wbase$1);\n        var quotient$2 = Caml_int64.add(Caml_int64.add(\n        /* int64 */\n        [\n        /* hi */\n        214748364,\n        /* lo */\n        3435973836], match$5[0]), match$6[0]);\n        var modulus$2 = match$6[1];\n        s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n\n        while (Caml_int64.neq(quotient$2,\n        /* int64 */\n        [\n        /* hi */\n        0,\n        /* lo */\n        0])) {\n          var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);\n          quotient$2 = match$7[0];\n          modulus$2 = match$7[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n        }\n\n        ;\n      } else {\n        var match$8 = Caml_int64.div_mod(x$1, wbase$1);\n        var quotient$3 = match$8[0];\n        var modulus$3 = match$8[1];\n        s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n\n        while (Caml_int64.neq(quotient$3,\n        /* int64 */\n        [\n        /* hi */\n        0,\n        /* lo */\n        0])) {\n          var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);\n          quotient$3 = match$9[0];\n          modulus$3 = match$9[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n        }\n\n        ;\n      }\n\n      break;\n  }\n\n  if (f[\n  /* prec */\n  9] >= 0) {\n    f[\n    /* filter */\n    2] = \" \";\n    var n = f[\n    /* prec */\n    9] - s.length | 0;\n\n    if (n > 0) {\n      s = Caml_utils.repeat(n, \"0\") + s;\n    }\n  }\n\n  return finish_formatting(f, s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f[\n  /* prec */\n  9] < 0 ? 6 : f[\n  /* prec */\n  9];\n  var x$1 = x < 0 ? (f[\n  /* sign */\n  8] = -1, -x) : x;\n  var s = \"\";\n\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f[\n    /* filter */\n    2] = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f[\n    /* conv */\n    10];\n\n    switch (match) {\n      case \"e\":\n        s = x$1.toExponential(prec);\n        var i = s.length;\n\n        if (s[i - 3 | 0] === \"e\") {\n          s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n        }\n\n        break;\n\n      case \"f\":\n        s = x$1.toFixed(prec);\n        break;\n\n      case \"g\":\n        var prec$1 = prec !== 0 ? prec : 1;\n        s = x$1.toExponential(prec$1 - 1 | 0);\n        var j = s.indexOf(\"e\");\n        var exp = Number(s.slice(j + 1 | 0)) | 0;\n\n        if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n          var i$1 = j - 1 | 0;\n\n          while (s[i$1] === \"0\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          ;\n\n          if (s[i$1] === \".\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n          var i$2 = s.length;\n\n          if (s[i$2 - 3 | 0] === \"e\") {\n            s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n          }\n        } else {\n          var p = prec$1;\n\n          if (exp < 0) {\n            p = p - (exp + 1 | 0) | 0;\n            s = x$1.toFixed(p);\n          } else {\n            while (function () {\n              s = x$1.toFixed(p);\n              return s.length > (prec$1 + 1 | 0);\n            }()) {\n              p = p - 1 | 0;\n            }\n\n            ;\n          }\n\n          if (p !== 0) {\n            var k = s.length - 1 | 0;\n\n            while (s[k] === \"0\") {\n              k = k - 1 | 0;\n            }\n\n            ;\n\n            if (s[k] === \".\") {\n              k = k - 1 | 0;\n            }\n\n            s = s.slice(0, k + 1 | 0);\n          }\n        }\n\n        break;\n\n      default:\n    }\n  } else {\n    s = \"inf\";\n    f[\n    /* filter */\n    2] = \" \";\n  }\n\n  return finish_formatting(f, s);\n}\n\nfunction float_of_string(s, exn) {\n  var res = +s;\n  if (s.length > 0 && res === res) return res;\n  s = s.replace(/_/g, \"\");\n  res = +s;\n\n  if (s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) {\n    return res;\n  }\n\n  ;\n  if (/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if (/^-inf(inity)?$/i.test(s)) return -Infinity;\n  throw exn;\n}\n\n;\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [Caml_builtin_exceptions.failure, \"float_of_string\"]);\n}\n\nvar caml_nativeint_format = caml_format_int;\nvar caml_int32_format = caml_format_int;\nvar caml_int32_of_string = caml_int_of_string;\nvar caml_nativeint_of_string = caml_int_of_string;\nexport { caml_format_float, caml_format_int, caml_nativeint_format, caml_int32_format, caml_float_of_string, caml_int64_format, caml_int_of_string, caml_int32_of_string, caml_int64_of_string, caml_nativeint_of_string };\n/* No side effect */","map":{"version":3,"sources":["/Users/bg/benzguo/memopub/node_modules/bs-platform/lib/es6/caml_format.js"],"names":["Caml_int32","Caml_int64","Caml_utils","Caml_builtin_exceptions","parse_digit","c","int_of_string_base","param","parse_sign_and_base","s","sign","base","i","match","charCodeAt","match$1","caml_int_of_string","threshold","len","length","d","failure","aux","_acc","_k","k","acc","a","v","acc$1","res","or_res","caml_int64_of_string","hbase","of_int32","lt","ge","gt","add","mul","or_","eq","neq","int_of_base","lowercase","parse_format","fmt","invalid_argument","f","_i","exit","String","fromCharCode","j","w","imul","j$1","finish_formatting","config","rawbuffer","justify","signstyle","filter","alternate","signedconv","width","uppercase","buffer","i_finish","i$1","i_finish$1","toUpperCase","i$2","i_finish$2","caml_format_int","f$1","toString","n","repeat","caml_int64_format","x","x$1","neg","wbase","cvtbl","y","discard_sign","div_mod","quotient","modulus","match$2","match$3","quotient$1","modulus$1","match$4","to_hex","wbase$1","cvtbl$1","y$1","match$5","match$6","quotient$2","modulus$2","match$7","match$8","quotient$3","modulus$3","match$9","caml_format_float","prec","isNaN","isFinite","toExponential","slice","toFixed","prec$1","indexOf","exp","Number","p","float_of_string","exn","replace","test","Infinity","caml_float_of_string","caml_nativeint_format","caml_int32_format","caml_int32_of_string","caml_nativeint_of_string"],"mappings":"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","sourcesContent":["\n\nimport * as Caml_int32 from \"./caml_int32.js\";\nimport * as Caml_int64 from \"./caml_int64.js\";\nimport * as Caml_utils from \"./caml_utils.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c - /* \"0\" */48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    case 3 : \n        return 2;\n    \n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base = /* Dec */2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n  switch (match) {\n    case 43 : \n        i = i + 1 | 0;\n        break;\n    case 44 : \n        break;\n    case 45 : \n        sign = -1;\n        i = i + 1 | 0;\n        break;\n    default:\n      \n  }\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0 : \n                base = /* Oct */0;\n                i = i + 2 | 0;\n                break;\n            case 6 : \n                i = i + 2 | 0;\n                break;\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 5 : \n            case 7 : \n            case 8 : \n                break;\n            case 9 : \n                base = /* Hex */1;\n                i = i + 2 | 0;\n                break;\n            \n          }\n        }\n        \n      } else if (match$1 === 98) {\n        base = /* Bin */3;\n        i = i + 2 | 0;\n      }\n      \n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0 : \n              base = /* Oct */0;\n              i = i + 2 | 0;\n              break;\n          case 6 : \n              i = i + 2 | 0;\n              break;\n          case 1 : \n          case 2 : \n          case 3 : \n          case 4 : \n          case 5 : \n          case 7 : \n          case 8 : \n              break;\n          case 9 : \n              base = /* Hex */1;\n              i = i + 2 | 0;\n              break;\n          \n        }\n      }\n      \n    } else {\n      base = /* Bin */3;\n      i = i + 2 | 0;\n    }\n  }\n  return /* tuple */[\n          i,\n          sign,\n          base\n        ];\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = parse_digit(c);\n  if (d < 0 || d >= base) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n        } else {\n          var v = parse_digit(a);\n          if (v < 0 || v >= base) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int_of_string\"\n                ];\n          } else {\n            var acc$1 = base * acc + v;\n            if (acc$1 > threshold) {\n              throw [\n                    Caml_builtin_exceptions.failure,\n                    \"int_of_string\"\n                  ];\n            } else {\n              _k = k + 1 | 0;\n              _acc = acc$1;\n              continue ;\n            }\n          }\n        }\n      }\n    };\n  };\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n  if (base === 10 && res !== or_res) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n  switch (hbase) {\n    case 0 : \n        threshold = /* int64 */[\n          /* hi */536870911,\n          /* lo */4294967295\n        ];\n        break;\n    case 1 : \n        threshold = /* int64 */[\n          /* hi */268435455,\n          /* lo */4294967295\n        ];\n        break;\n    case 2 : \n        threshold = /* int64 */[\n          /* hi */429496729,\n          /* lo */2576980377\n        ];\n        break;\n    case 3 : \n        threshold = /* int64 */[\n          /* hi */2147483647,\n          /* lo */4294967295\n        ];\n        break;\n    \n  }\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n  if (Caml_int64.lt(d, /* int64 */[\n          /* hi */0,\n          /* lo */0\n        ]) || Caml_int64.ge(d, base)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n        } else {\n          var v = Caml_int64.of_int32(parse_digit(a));\n          if (Caml_int64.lt(v, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int64_of_string\"\n                ];\n          } else {\n            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n            _k = k + 1 | 0;\n            _acc = acc$1;\n            continue ;\n          }\n        }\n      }\n    };\n  };\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res, /* int64 */[\n        /* hi */0,\n        /* lo */0\n      ]);\n  if (Caml_int64.eq(base, /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ]) && Caml_int64.neq(res, or_res)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n  if (len > 31) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"format_int: format too long\"\n        ];\n  }\n  var f = /* record */[\n    /* justify */\"+\",\n    /* signstyle */\"-\",\n    /* filter */\" \",\n    /* alternate */false,\n    /* base : Dec */2,\n    /* signedconv */false,\n    /* width */0,\n    /* uppercase */false,\n    /* sign */1,\n    /* prec */-1,\n    /* conv */\"f\"\n  ];\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= len) {\n      return f;\n    } else {\n      var c = fmt.charCodeAt(i);\n      var exit = 0;\n      if (c >= 69) {\n        if (c >= 88) {\n          if (c >= 121) {\n            exit = 1;\n          } else {\n            switch (c - 88 | 0) {\n              case 0 : \n                  f[/* base */4] = /* Hex */1;\n                  f[/* uppercase */7] = true;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 13 : \n              case 14 : \n              case 15 : \n                  exit = 5;\n                  break;\n              case 12 : \n              case 17 : \n                  exit = 4;\n                  break;\n              case 23 : \n                  f[/* base */4] = /* Oct */0;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 29 : \n                  f[/* base */4] = /* Dec */2;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 1 : \n              case 2 : \n              case 3 : \n              case 4 : \n              case 5 : \n              case 6 : \n              case 7 : \n              case 8 : \n              case 9 : \n              case 10 : \n              case 11 : \n              case 16 : \n              case 18 : \n              case 19 : \n              case 20 : \n              case 21 : \n              case 22 : \n              case 24 : \n              case 25 : \n              case 26 : \n              case 27 : \n              case 28 : \n              case 30 : \n              case 31 : \n                  exit = 1;\n                  break;\n              case 32 : \n                  f[/* base */4] = /* Hex */1;\n                  _i = i + 1 | 0;\n                  continue ;\n              \n            }\n          }\n        } else if (c >= 72) {\n          exit = 1;\n        } else {\n          f[/* signedconv */5] = true;\n          f[/* uppercase */7] = true;\n          f[/* conv */10] = String.fromCharCode(lowercase(c));\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else {\n        switch (c) {\n          case 35 : \n              f[/* alternate */3] = true;\n              _i = i + 1 | 0;\n              continue ;\n          case 32 : \n          case 43 : \n              exit = 2;\n              break;\n          case 45 : \n              f[/* justify */0] = \"-\";\n              _i = i + 1 | 0;\n              continue ;\n          case 46 : \n              f[/* prec */9] = 0;\n              var j = i + 1 | 0;\n              while((function(j){\n                  return function () {\n                    var w = fmt.charCodeAt(j) - /* \"0\" */48 | 0;\n                    return w >= 0 && w <= 9;\n                  }\n                  }(j))()) {\n                f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* \"0\" */48 | 0;\n                j = j + 1 | 0;\n              };\n              _i = j;\n              continue ;\n          case 33 : \n          case 34 : \n          case 36 : \n          case 37 : \n          case 38 : \n          case 39 : \n          case 40 : \n          case 41 : \n          case 42 : \n          case 44 : \n          case 47 : \n              exit = 1;\n              break;\n          case 48 : \n              f[/* filter */2] = \"0\";\n              _i = i + 1 | 0;\n              continue ;\n          case 49 : \n          case 50 : \n          case 51 : \n          case 52 : \n          case 53 : \n          case 54 : \n          case 55 : \n          case 56 : \n          case 57 : \n              exit = 3;\n              break;\n          default:\n            exit = 1;\n        }\n      }\n      switch (exit) {\n        case 1 : \n            _i = i + 1 | 0;\n            continue ;\n        case 2 : \n            f[/* signstyle */1] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n        case 3 : \n            f[/* width */6] = 0;\n            var j$1 = i;\n            while((function(j$1){\n                return function () {\n                  var w = fmt.charCodeAt(j$1) - /* \"0\" */48 | 0;\n                  return w >= 0 && w <= 9;\n                }\n                }(j$1))()) {\n              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* \"0\" */48 | 0;\n              j$1 = j$1 + 1 | 0;\n            };\n            _i = j$1;\n            continue ;\n        case 4 : \n            f[/* signedconv */5] = true;\n            f[/* base */4] = /* Dec */2;\n            _i = i + 1 | 0;\n            continue ;\n        case 5 : \n            f[/* signedconv */5] = true;\n            f[/* conv */10] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n        \n      }\n    }\n  };\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config[/* justify */0];\n  var signstyle = config[/* signstyle */1];\n  var filter = config[/* filter */2];\n  var alternate = config[/* alternate */3];\n  var base = config[/* base */4];\n  var signedconv = config[/* signedconv */5];\n  var width = config[/* width */6];\n  var uppercase = config[/* uppercase */7];\n  var sign = config[/* sign */8];\n  var len = rawbuffer.length;\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n  if (alternate) {\n    if (base === /* Oct */0) {\n      len = len + 1 | 0;\n    } else if (base === /* Hex */1) {\n      len = len + 2 | 0;\n    }\n    \n  }\n  var buffer = \"\";\n  if (justify === \"+\" && filter === \" \") {\n    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){\n      buffer = buffer + filter;\n    }\n  }\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n    \n  }\n  if (alternate && base === /* Oct */0) {\n    buffer = buffer + \"0\";\n  }\n  if (alternate && base === /* Hex */1) {\n    buffer = buffer + \"0x\";\n  }\n  if (justify === \"+\" && filter === \"0\") {\n    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){\n      buffer = buffer + filter;\n    }\n  }\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n  if (justify === \"-\") {\n    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){\n      buffer = buffer + \" \";\n    }\n  }\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  } else {\n    var f = parse_format(fmt);\n    var f$1 = f;\n    var i$1 = i;\n    var i$2 = i$1 < 0 ? (\n        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)\n      ) : i$1;\n    var s = i$2.toString(int_of_base(f$1[/* base */4]));\n    if (f$1[/* prec */9] >= 0) {\n      f$1[/* filter */2] = \" \";\n      var n = f$1[/* prec */9] - s.length | 0;\n      if (n > 0) {\n        s = Caml_utils.repeat(n, \"0\") + s;\n      }\n      \n    }\n    return finish_formatting(f$1, s);\n  }\n}\n\nfunction caml_int64_format(fmt, x) {\n  var f = parse_format(fmt);\n  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[\n        /* hi */0,\n        /* lo */0\n      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;\n  var s = \"\";\n  var match = f[/* base */4];\n  switch (match) {\n    case 0 : \n        var wbase = /* int64 */[\n          /* hi */0,\n          /* lo */8\n        ];\n        var cvtbl = \"01234567\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y = Caml_int64.discard_sign(x$1);\n          var match$1 = Caml_int64.div_mod(y, wbase);\n          var quotient = Caml_int64.add(/* int64 */[\n                /* hi */268435456,\n                /* lo */0\n              ], match$1[0]);\n          var modulus = match$1[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          while(Caml_int64.neq(quotient, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$2 = Caml_int64.div_mod(quotient, wbase);\n            quotient = match$2[0];\n            modulus = match$2[1];\n            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          };\n        } else {\n          var match$3 = Caml_int64.div_mod(x$1, wbase);\n          var quotient$1 = match$3[0];\n          var modulus$1 = match$3[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$1, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$4 = Caml_int64.div_mod(quotient$1, wbase);\n            quotient$1 = match$4[0];\n            modulus$1 = match$4[1];\n            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          };\n        }\n        break;\n    case 1 : \n        s = Caml_int64.to_hex(x$1) + s;\n        break;\n    case 2 : \n        var wbase$1 = /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ];\n        var cvtbl$1 = \"0123456789\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y$1 = Caml_int64.discard_sign(x$1);\n          var match$5 = Caml_int64.div_mod(y$1, wbase$1);\n          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[\n                    /* hi */0,\n                    /* lo */8\n                  ], match$5[1]), wbase$1);\n          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[\n                    /* hi */214748364,\n                    /* lo */3435973836\n                  ], match$5[0]), match$6[0]);\n          var modulus$2 = match$6[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$2, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);\n            quotient$2 = match$7[0];\n            modulus$2 = match$7[1];\n            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          };\n        } else {\n          var match$8 = Caml_int64.div_mod(x$1, wbase$1);\n          var quotient$3 = match$8[0];\n          var modulus$3 = match$8[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$3, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);\n            quotient$3 = match$9[0];\n            modulus$3 = match$9[1];\n            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          };\n        }\n        break;\n    \n  }\n  if (f[/* prec */9] >= 0) {\n    f[/* filter */2] = \" \";\n    var n = f[/* prec */9] - s.length | 0;\n    if (n > 0) {\n      s = Caml_utils.repeat(n, \"0\") + s;\n    }\n    \n  }\n  return finish_formatting(f, s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];\n  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;\n  var s = \"\";\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f[/* filter */2] = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f[/* conv */10];\n    switch (match) {\n      case \"e\" : \n          s = x$1.toExponential(prec);\n          var i = s.length;\n          if (s[i - 3 | 0] === \"e\") {\n            s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n          }\n          break;\n      case \"f\" : \n          s = x$1.toFixed(prec);\n          break;\n      case \"g\" : \n          var prec$1 = prec !== 0 ? prec : 1;\n          s = x$1.toExponential(prec$1 - 1 | 0);\n          var j = s.indexOf(\"e\");\n          var exp = Number(s.slice(j + 1 | 0)) | 0;\n          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n            var i$1 = j - 1 | 0;\n            while(s[i$1] === \"0\") {\n              i$1 = i$1 - 1 | 0;\n            };\n            if (s[i$1] === \".\") {\n              i$1 = i$1 - 1 | 0;\n            }\n            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n            var i$2 = s.length;\n            if (s[i$2 - 3 | 0] === \"e\") {\n              s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n            }\n            \n          } else {\n            var p = prec$1;\n            if (exp < 0) {\n              p = p - (exp + 1 | 0) | 0;\n              s = x$1.toFixed(p);\n            } else {\n              while((function () {\n                      s = x$1.toFixed(p);\n                      return s.length > (prec$1 + 1 | 0);\n                    })()) {\n                p = p - 1 | 0;\n              };\n            }\n            if (p !== 0) {\n              var k = s.length - 1 | 0;\n              while(s[k] === \"0\") {\n                k = k - 1 | 0;\n              };\n              if (s[k] === \".\") {\n                k = k - 1 | 0;\n              }\n              s = s.slice(0, k + 1 | 0);\n            }\n            \n          }\n          break;\n      default:\n        \n    }\n  } else {\n    s = \"inf\";\n    f[/* filter */2] = \" \";\n  }\n  return finish_formatting(f, s);\n}\n\nfunction float_of_string (s,exn){ \n\n    var res = +s;\n    if ((s.length > 0) && (res === res))\n        return res;\n    s = s.replace(/_/g, \"\");\n    res = +s;\n    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {\n        return res;\n    };\n    if (/^\\+?inf(inity)?$/i.test(s))\n        return Infinity;\n    if (/^-inf(inity)?$/i.test(s))\n        return -Infinity;\n    throw exn;\n\n};\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [\n              Caml_builtin_exceptions.failure,\n              \"float_of_string\"\n            ]);\n}\n\nvar caml_nativeint_format = caml_format_int;\n\nvar caml_int32_format = caml_format_int;\n\nvar caml_int32_of_string = caml_int_of_string;\n\nvar caml_nativeint_of_string = caml_int_of_string;\n\nexport {\n  caml_format_float ,\n  caml_format_int ,\n  caml_nativeint_format ,\n  caml_int32_format ,\n  caml_float_of_string ,\n  caml_int64_format ,\n  caml_int_of_string ,\n  caml_int32_of_string ,\n  caml_int64_of_string ,\n  caml_nativeint_of_string ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}