{"ast":null,"code":"import * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"index out of bounds\"];\n  } else {\n    return s[i];\n  }\n}\n\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    for (var k = i, k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k) {\n      s[k] = c;\n    }\n\n    return (\n      /* () */\n      0\n    );\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_create_bytes(len) {\n  if (len < 0) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"String.create\"];\n  } else {\n    var result = new Array(len);\n\n    for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n      result[i] =\n      /* \"\\000\" */\n      0;\n    }\n\n    return result;\n  }\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    if (s1 === s2) {\n      var s1$1 = s1;\n      var i1$1 = i1;\n      var i2$1 = i2;\n      var len$1 = len;\n\n      if (i1$1 < i2$1) {\n        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;\n        var range_b = len$1 - 1 | 0;\n        var range = range_a > range_b ? range_b : range_a;\n\n        for (var j = range; j >= 0; --j) {\n          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];\n        }\n\n        return (\n          /* () */\n          0\n        );\n      } else if (i1$1 > i2$1) {\n        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;\n        var range_b$1 = len$1 - 1 | 0;\n        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;\n\n        for (var k = 0; k <= range$1; ++k) {\n          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];\n        }\n\n        return (\n          /* () */\n          0\n        );\n      } else {\n        return 0;\n      }\n    } else {\n      var off1 = s1.length - i1 | 0;\n\n      if (len <= off1) {\n        for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n          s2[i2 + i | 0] = s1[i1 + i | 0];\n        }\n\n        return (\n          /* () */\n          0\n        );\n      } else {\n        for (var i$1 = 0, i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1) {\n          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n        }\n\n        for (var i$2 = off1, i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2) {\n          s2[i2 + i$2 | 0] =\n          /* \"\\000\" */\n          0;\n        }\n\n        return (\n          /* () */\n          0\n        );\n      }\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_to_string(a) {\n  var bytes = a;\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n\n  if (i === 0 && len <= 4096 && len === bytes.length) {\n    return String.fromCharCode.apply(null, bytes);\n  } else {\n    var offset = 0;\n\n    while (s_len > 0) {\n      var next = s_len < 1024 ? s_len : 1024;\n      var tmp_bytes = new Array(next);\n      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);\n      s = s + String.fromCharCode.apply(null, tmp_bytes);\n      s_len = s_len - next | 0;\n      offset = offset + next | 0;\n    }\n\n    ;\n    return s;\n  }\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    var off1 = s1.length - i1 | 0;\n\n    if (len <= off1) {\n      for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n      }\n\n      return (\n        /* () */\n        0\n      );\n    } else {\n      for (var i$1 = 0, i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1) {\n        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n      }\n\n      for (var i$2 = off1, i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2) {\n        s2[i2 + i$2 | 0] =\n        /* \"\\000\" */\n        0;\n      }\n\n      return (\n        /* () */\n        0\n      );\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n\n  for (var i = 0, i_finish = len - 1 | 0; i <= i_finish; ++i) {\n    res[i] = s.charCodeAt(i);\n  }\n\n  return res;\n}\n\nexport { caml_create_bytes, caml_fill_bytes, get, bytes_to_string, caml_blit_bytes, caml_blit_string, bytes_of_string };\n/* No side effect */","map":{"version":3,"sources":["/Users/bg/benzguo/memopub/node_modules/bs-platform/lib/es6/caml_bytes.js"],"names":["Caml_builtin_exceptions","get","s","i","length","invalid_argument","caml_fill_bytes","l","c","k","k_finish","caml_create_bytes","len","result","Array","i_finish","caml_blit_bytes","s1","i1","s2","i2","s1$1","i1$1","i2$1","len$1","range_a","range_b","range","j","range_a$1","range_b$1","range$1","off1","i$1","i_finish$1","i$2","i_finish$2","bytes_to_string","a","bytes","s_len","String","fromCharCode","apply","offset","next","tmp_bytes","caml_blit_string","charCodeAt","bytes_of_string","res"],"mappings":"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","sourcesContent":["\n\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    return s[i];\n  }\n}\n\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){\n      s[k] = c;\n    }\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_create_bytes(len) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.create\"\n        ];\n  } else {\n    var result = new Array(len);\n    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      result[i] = /* \"\\000\" */0;\n    }\n    return result;\n  }\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    if (s1 === s2) {\n      var s1$1 = s1;\n      var i1$1 = i1;\n      var i2$1 = i2;\n      var len$1 = len;\n      if (i1$1 < i2$1) {\n        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;\n        var range_b = len$1 - 1 | 0;\n        var range = range_a > range_b ? range_b : range_a;\n        for(var j = range; j >= 0; --j){\n          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];\n        }\n        return /* () */0;\n      } else if (i1$1 > i2$1) {\n        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;\n        var range_b$1 = len$1 - 1 | 0;\n        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;\n        for(var k = 0; k <= range$1; ++k){\n          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];\n        }\n        return /* () */0;\n      } else {\n        return 0;\n      }\n    } else {\n      var off1 = s1.length - i1 | 0;\n      if (len <= off1) {\n        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n          s2[i2 + i | 0] = s1[i1 + i | 0];\n        }\n        return /* () */0;\n      } else {\n        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n        }\n        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n          s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n        }\n        return /* () */0;\n      }\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_to_string(a) {\n  var bytes = a;\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n  if (i === 0 && len <= 4096 && len === bytes.length) {\n    return String.fromCharCode.apply(null, bytes);\n  } else {\n    var offset = 0;\n    while(s_len > 0) {\n      var next = s_len < 1024 ? s_len : 1024;\n      var tmp_bytes = new Array(next);\n      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);\n      s = s + String.fromCharCode.apply(null, tmp_bytes);\n      s_len = s_len - next | 0;\n      offset = offset + next | 0;\n    };\n    return s;\n  }\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    var off1 = s1.length - i1 | 0;\n    if (len <= off1) {\n      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n      }\n      return /* () */0;\n    } else {\n      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n      }\n      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n        s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n      }\n      return /* () */0;\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    res[i] = s.charCodeAt(i);\n  }\n  return res;\n}\n\nexport {\n  caml_create_bytes ,\n  caml_fill_bytes ,\n  get ,\n  bytes_to_string ,\n  caml_blit_bytes ,\n  caml_blit_string ,\n  bytes_of_string ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}