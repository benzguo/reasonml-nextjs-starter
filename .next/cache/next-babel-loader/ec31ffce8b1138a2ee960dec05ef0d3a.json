{"ast":null,"code":"import * as Curry from \"./curry.js\";\nimport * as Caml_io from \"./caml_io.js\";\nimport * as Caml_sys from \"./caml_sys.js\";\nimport * as Caml_bytes from \"./caml_bytes.js\";\nimport * as Caml_format from \"./caml_format.js\";\nimport * as Caml_string from \"./caml_string.js\";\nimport * as Caml_exceptions from \"./caml_exceptions.js\";\nimport * as Caml_missing_polyfill from \"./caml_missing_polyfill.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\nimport * as CamlinternalFormatBasics from \"./camlinternalFormatBasics.js\";\n\nfunction failwith(s) {\n  throw [Caml_builtin_exceptions.failure, s];\n}\n\nfunction invalid_arg(s) {\n  throw [Caml_builtin_exceptions.invalid_argument, s];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  } else {\n    return -x | 0;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) {\n      return (\n        /* FP_normal */\n        0\n      );\n    } else if (x !== 0) {\n      return (\n        /* FP_subnormal */\n        1\n      );\n    } else {\n      return (\n        /* FP_zero */\n        2\n      );\n    }\n  } else if (isNaN(x)) {\n    return (\n      /* FP_nan */\n      4\n    );\n  } else {\n    return (\n      /* FP_infinite */\n      3\n    );\n  }\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"char_of_int\"];\n  } else {\n    return n;\n  }\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\":\n      return false;\n\n    case \"true\":\n      return true;\n\n    default:\n      throw [Caml_builtin_exceptions.invalid_argument, \"bool_of_string\"];\n  }\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n\n    if (i >= l) {\n      return s + \".\";\n    } else {\n      var match = Caml_string.get(s, i);\n\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        } else {\n          _i = i + 1 | 0;\n          continue;\n        }\n      } else if (match !== 45) {\n        return s;\n      } else {\n        _i = i + 1 | 0;\n        continue;\n      }\n    }\n  }\n\n  ;\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return (\n      /* :: */\n      [l1[0], $at(l1[1], l2)]\n    );\n  } else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\nvar stdout = Caml_io.stdout;\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_out\");\n}\n\nfunction open_out(name) {\n  return open_out_gen(\n  /* :: */\n  [\n  /* Open_wronly */\n  1,\n  /* :: */\n  [\n  /* Open_creat */\n  3,\n  /* :: */\n  [\n  /* Open_trunc */\n  4,\n  /* :: */\n  [\n  /* Open_text */\n  7,\n  /* [] */\n  0]]]], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(\n  /* :: */\n  [\n  /* Open_wronly */\n  1,\n  /* :: */\n  [\n  /* Open_creat */\n  3,\n  /* :: */\n  [\n  /* Open_trunc */\n  4,\n  /* :: */\n  [\n  /* Open_binary */\n  6,\n  /* [] */\n  0]]]], 438, name);\n}\n\nfunction flush_all(param) {\n  var _param = Caml_io.caml_ml_out_channels_list(\n  /* () */\n  0);\n\n  while (true) {\n    var param$1 = _param;\n\n    if (param$1) {\n      try {\n        Caml_io.caml_ml_flush(param$1[0]);\n      } catch (exn) {}\n\n      _param = param$1[1];\n      continue;\n    } else {\n      return (\n        /* () */\n        0\n      );\n    }\n  }\n\n  ;\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"output\"];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"output_substring\"];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_value(chan, v) {\n  return Caml_missing_polyfill.not_implemented(\"caml_output_value\");\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  } catch (exn) {}\n\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  } catch (exn$1) {\n    return (\n      /* () */\n      0\n    );\n  }\n}\n\nfunction open_in_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_in\");\n}\n\nfunction open_in(name) {\n  return open_in_gen(\n  /* :: */\n  [\n  /* Open_rdonly */\n  0,\n  /* :: */\n  [\n  /* Open_text */\n  7,\n  /* [] */\n  0]], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(\n  /* :: */\n  [\n  /* Open_rdonly */\n  0,\n  /* :: */\n  [\n  /* Open_binary */\n  6,\n  /* [] */\n  0]], 0, name);\n}\n\nfunction input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"input\"];\n  } else {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n  }\n}\n\nfunction unsafe_really_input(ic, s, _ofs, _len) {\n  while (true) {\n    var len = _len;\n    var ofs = _ofs;\n\n    if (len <= 0) {\n      return (\n        /* () */\n        0\n      );\n    } else {\n      var r = Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n\n      if (r === 0) {\n        throw Caml_builtin_exceptions.end_of_file;\n      } else {\n        _len = len - r | 0;\n        _ofs = ofs + r | 0;\n        continue;\n      }\n    }\n  }\n\n  ;\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"really_input\"];\n  } else {\n    return unsafe_really_input(ic, s, ofs, len);\n  }\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_bytes.caml_create_bytes(len);\n  really_input(ic, s, 0, len);\n  return Caml_bytes.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function build_result(buf, _pos, _param) {\n    while (true) {\n      var param = _param;\n      var pos = _pos;\n\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue;\n      } else {\n        return buf;\n      }\n    }\n\n    ;\n  };\n\n  var scan = function scan(_accu, _len) {\n    while (true) {\n      var len = _len;\n      var accu = _accu;\n      var n = Caml_missing_polyfill.not_implemented(\"caml_ml_input_scan_line\");\n\n      if (n === 0) {\n        if (accu) {\n          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);\n        } else {\n          throw Caml_builtin_exceptions.end_of_file;\n        }\n      } else if (n > 0) {\n        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n\n        if (accu) {\n          var len$1 = (len + n | 0) - 1 | 0;\n          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1,\n          /* :: */\n          [res, accu]);\n        } else {\n          return res;\n        }\n      } else {\n        var beg = Caml_bytes.caml_create_bytes(-n | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        _len = len - n | 0;\n        _accu =\n        /* :: */\n        [beg, accu];\n        continue;\n      }\n    }\n\n    ;\n  };\n\n  return Caml_bytes.bytes_to_string(scan(\n  /* [] */\n  0, 0));\n}\n\nfunction close_in_noerr(ic) {\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  } catch (exn) {\n    return (\n      /* () */\n      0\n    );\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, String(i));\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_newline(param) {\n  Caml_io.caml_ml_output_char(stdout,\n  /* \"\\n\" */\n  10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, String(i));\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_newline(param) {\n  Caml_io.caml_ml_output_char(stderr,\n  /* \"\\n\" */\n  10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line(param) {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int(param) {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float(param) {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return (\n    /* Format */\n    [CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]), param[1] + (\"%,\" + param$1[1])]\n  );\n}\n\nvar exit_function =\n/* record */\n[\n/* contents */\nflush_all];\n\nfunction at_exit(f) {\n  var g = exit_function[0];\n\n  exit_function[0] = function (param) {\n    Curry._1(f,\n    /* () */\n    0);\n\n    return Curry._1(g,\n    /* () */\n    0);\n  };\n\n  return (\n    /* () */\n    0\n  );\n}\n\nfunction do_at_exit(param) {\n  return Curry._1(exit_function[0],\n  /* () */\n  0);\n}\n\nfunction exit(retcode) {\n  do_at_exit(\n  /* () */\n  0);\n  return Caml_sys.caml_sys_exit(retcode);\n}\n\nvar max_int = 2147483647;\nvar epsilon_float = 2.220446049250313e-16;\nvar flush = Caml_io.caml_ml_flush;\nvar output_char = Caml_io.caml_ml_output_char;\nvar output_byte = Caml_io.caml_ml_output_char;\n\nfunction output_binary_int(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_output_int\");\n}\n\nfunction seek_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out\");\n}\n\nfunction pos_out(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out\");\n}\n\nfunction out_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction set_binary_mode_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction input_char(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_byte(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_binary_int(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_int\");\n}\n\nfunction input_value(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_input_value\");\n}\n\nfunction seek_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in\");\n}\n\nfunction pos_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in\");\n}\n\nfunction in_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction close_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction set_binary_mode_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction LargeFile_000(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out_64\");\n}\n\nfunction LargeFile_001(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out_64\");\n}\n\nfunction LargeFile_002(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nfunction LargeFile_003(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in_64\");\n}\n\nfunction LargeFile_004(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in_64\");\n}\n\nfunction LargeFile_005(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nvar LargeFile = [LargeFile_000, LargeFile_001, LargeFile_002, LargeFile_003, LargeFile_004, LargeFile_005];\nexport { invalid_arg, failwith, Exit, abs, max_int, min_int, lnot, epsilon_float, classify_float, char_of_int, string_of_bool, bool_of_string, string_of_float, $at, stdin, stdout, stderr, print_char, print_string, print_bytes, print_int, print_float, print_newline, prerr_char, prerr_string, prerr_bytes, prerr_int, prerr_float, prerr_newline, read_line, read_int, read_float, open_out, open_out_bin, open_out_gen, flush, flush_all, output_char, output_string, output_bytes, output, output_substring, output_byte, output_binary_int, output_value, seek_out, pos_out, out_channel_length, close_out, close_out_noerr, set_binary_mode_out, open_in, open_in_bin, open_in_gen, input_char, input_line, input, really_input, really_input_string, input_byte, input_binary_int, input_value, seek_in, pos_in, in_channel_length, close_in, close_in_noerr, set_binary_mode_in, LargeFile, string_of_format, $caret$caret, exit, at_exit, valid_float_lexem, unsafe_really_input, do_at_exit };\n/* No side effect */","map":{"version":3,"sources":["/Users/bg/benzguo/memopub/node_modules/bs-platform/lib/es6/pervasives.js"],"names":["Curry","Caml_io","Caml_sys","Caml_bytes","Caml_format","Caml_string","Caml_exceptions","Caml_missing_polyfill","Caml_builtin_exceptions","CamlinternalFormatBasics","failwith","s","failure","invalid_arg","invalid_argument","Exit","create","abs","x","lnot","min_int","classify_float","isFinite","Math","isNaN","char_of_int","n","string_of_bool","b","bool_of_string","param","valid_float_lexem","l","length","_i","i","match","get","string_of_float","f","caml_format_float","$at","l1","l2","stdin","stdout","stderr","open_out_gen","mode","perm","name","not_implemented","open_out","open_out_bin","flush_all","_param","caml_ml_out_channels_list","param$1","caml_ml_flush","exn","output_bytes","oc","caml_ml_output","output_string","output","ofs","len","output_substring","output_value","chan","v","close_out","close_out_noerr","exn$1","open_in_gen","open_in","open_in_bin","input","ic","unsafe_really_input","_ofs","_len","r","end_of_file","really_input","really_input_string","caml_create_bytes","bytes_to_string","input_line","build_result","buf","_pos","pos","hd","caml_blit_bytes","scan","_accu","accu","res","len$1","beg","close_in_noerr","print_char","c","caml_ml_output_char","print_string","print_bytes","print_int","String","print_float","print_newline","prerr_char","prerr_string","prerr_bytes","prerr_int","prerr_float","prerr_newline","read_line","read_int","caml_int_of_string","read_float","caml_float_of_string","string_of_format","$caret$caret","concat_fmt","exit_function","at_exit","g","_1","do_at_exit","exit","retcode","caml_sys_exit","max_int","epsilon_float","flush","output_char","output_byte","output_binary_int","prim","prim$1","seek_out","pos_out","out_channel_length","set_binary_mode_out","input_char","input_byte","input_binary_int","input_value","seek_in","pos_in","in_channel_length","close_in","set_binary_mode_in","LargeFile_000","LargeFile_001","LargeFile_002","LargeFile_003","LargeFile_004","LargeFile_005","LargeFile"],"mappings":"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","sourcesContent":["\n\nimport * as Curry from \"./curry.js\";\nimport * as Caml_io from \"./caml_io.js\";\nimport * as Caml_sys from \"./caml_sys.js\";\nimport * as Caml_bytes from \"./caml_bytes.js\";\nimport * as Caml_format from \"./caml_format.js\";\nimport * as Caml_string from \"./caml_string.js\";\nimport * as Caml_exceptions from \"./caml_exceptions.js\";\nimport * as Caml_missing_polyfill from \"./caml_missing_polyfill.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\nimport * as CamlinternalFormatBasics from \"./camlinternalFormatBasics.js\";\n\nfunction failwith(s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        s\n      ];\n}\n\nfunction invalid_arg(s) {\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        s\n      ];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  } else {\n    return -x | 0;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) {\n      return /* FP_normal */0;\n    } else if (x !== 0) {\n      return /* FP_subnormal */1;\n    } else {\n      return /* FP_zero */2;\n    }\n  } else if (isNaN(x)) {\n    return /* FP_nan */4;\n  } else {\n    return /* FP_infinite */3;\n  }\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"char_of_int\"\n        ];\n  } else {\n    return n;\n  }\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\" : \n        return false;\n    case \"true\" : \n        return true;\n    default:\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"bool_of_string\"\n          ];\n  }\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= l) {\n      return s + \".\";\n    } else {\n      var match = Caml_string.get(s, i);\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        } else {\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else if (match !== 45) {\n        return s;\n      } else {\n        _i = i + 1 | 0;\n        continue ;\n      }\n    }\n  };\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return /* :: */[\n            l1[0],\n            $at(l1[1], l2)\n          ];\n  } else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\n\nvar stdout = Caml_io.stdout;\n\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_out\");\n}\n\nfunction open_out(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_text */7,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_binary */6,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction flush_all(param) {\n  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);\n  while(true) {\n    var param$1 = _param;\n    if (param$1) {\n      try {\n        Caml_io.caml_ml_flush(param$1[0]);\n      }\n      catch (exn){\n        \n      }\n      _param = param$1[1];\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output\"\n        ];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output_substring\"\n        ];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_value(chan, v) {\n  return Caml_missing_polyfill.not_implemented(\"caml_output_value\");\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  }\n  catch (exn){\n    \n  }\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  }\n  catch (exn$1){\n    return /* () */0;\n  }\n}\n\nfunction open_in_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_in\");\n}\n\nfunction open_in(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_text */7,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_binary */6,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"input\"\n        ];\n  } else {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n  }\n}\n\nfunction unsafe_really_input(ic, s, _ofs, _len) {\n  while(true) {\n    var len = _len;\n    var ofs = _ofs;\n    if (len <= 0) {\n      return /* () */0;\n    } else {\n      var r = Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n      if (r === 0) {\n        throw Caml_builtin_exceptions.end_of_file;\n      } else {\n        _len = len - r | 0;\n        _ofs = ofs + r | 0;\n        continue ;\n      }\n    }\n  };\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"really_input\"\n        ];\n  } else {\n    return unsafe_really_input(ic, s, ofs, len);\n  }\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_bytes.caml_create_bytes(len);\n  really_input(ic, s, 0, len);\n  return Caml_bytes.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function (buf, _pos, _param) {\n    while(true) {\n      var param = _param;\n      var pos = _pos;\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue ;\n      } else {\n        return buf;\n      }\n    };\n  };\n  var scan = function (_accu, _len) {\n    while(true) {\n      var len = _len;\n      var accu = _accu;\n      var n = Caml_missing_polyfill.not_implemented(\"caml_ml_input_scan_line\");\n      if (n === 0) {\n        if (accu) {\n          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);\n        } else {\n          throw Caml_builtin_exceptions.end_of_file;\n        }\n      } else if (n > 0) {\n        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n        if (accu) {\n          var len$1 = (len + n | 0) - 1 | 0;\n          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, /* :: */[\n                      res,\n                      accu\n                    ]);\n        } else {\n          return res;\n        }\n      } else {\n        var beg = Caml_bytes.caml_create_bytes(-n | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        _len = len - n | 0;\n        _accu = /* :: */[\n          beg,\n          accu\n        ];\n        continue ;\n      }\n    };\n  };\n  return Caml_bytes.bytes_to_string(scan(/* [] */0, 0));\n}\n\nfunction close_in_noerr(ic) {\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  }\n  catch (exn){\n    return /* () */0;\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, String(i));\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_newline(param) {\n  Caml_io.caml_ml_output_char(stdout, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, String(i));\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_newline(param) {\n  Caml_io.caml_ml_output_char(stderr, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line(param) {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int(param) {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float(param) {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return /* Format */[\n          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),\n          param[1] + (\"%,\" + param$1[1])\n        ];\n}\n\nvar exit_function = /* record */[/* contents */flush_all];\n\nfunction at_exit(f) {\n  var g = exit_function[0];\n  exit_function[0] = (function (param) {\n      Curry._1(f, /* () */0);\n      return Curry._1(g, /* () */0);\n    });\n  return /* () */0;\n}\n\nfunction do_at_exit(param) {\n  return Curry._1(exit_function[0], /* () */0);\n}\n\nfunction exit(retcode) {\n  do_at_exit(/* () */0);\n  return Caml_sys.caml_sys_exit(retcode);\n}\n\nvar max_int = 2147483647;\n\nvar epsilon_float = 2.220446049250313e-16;\n\nvar flush = Caml_io.caml_ml_flush;\n\nvar output_char = Caml_io.caml_ml_output_char;\n\nvar output_byte = Caml_io.caml_ml_output_char;\n\nfunction output_binary_int(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_output_int\");\n}\n\nfunction seek_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out\");\n}\n\nfunction pos_out(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out\");\n}\n\nfunction out_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction set_binary_mode_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction input_char(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_byte(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_binary_int(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_int\");\n}\n\nfunction input_value(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_input_value\");\n}\n\nfunction seek_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in\");\n}\n\nfunction pos_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in\");\n}\n\nfunction in_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction close_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction set_binary_mode_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction LargeFile_000(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out_64\");\n}\n\nfunction LargeFile_001(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out_64\");\n}\n\nfunction LargeFile_002(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nfunction LargeFile_003(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in_64\");\n}\n\nfunction LargeFile_004(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in_64\");\n}\n\nfunction LargeFile_005(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nvar LargeFile = [\n  LargeFile_000,\n  LargeFile_001,\n  LargeFile_002,\n  LargeFile_003,\n  LargeFile_004,\n  LargeFile_005\n];\n\nexport {\n  invalid_arg ,\n  failwith ,\n  Exit ,\n  abs ,\n  max_int ,\n  min_int ,\n  lnot ,\n  epsilon_float ,\n  classify_float ,\n  char_of_int ,\n  string_of_bool ,\n  bool_of_string ,\n  string_of_float ,\n  $at ,\n  stdin ,\n  stdout ,\n  stderr ,\n  print_char ,\n  print_string ,\n  print_bytes ,\n  print_int ,\n  print_float ,\n  print_newline ,\n  prerr_char ,\n  prerr_string ,\n  prerr_bytes ,\n  prerr_int ,\n  prerr_float ,\n  prerr_newline ,\n  read_line ,\n  read_int ,\n  read_float ,\n  open_out ,\n  open_out_bin ,\n  open_out_gen ,\n  flush ,\n  flush_all ,\n  output_char ,\n  output_string ,\n  output_bytes ,\n  output ,\n  output_substring ,\n  output_byte ,\n  output_binary_int ,\n  output_value ,\n  seek_out ,\n  pos_out ,\n  out_channel_length ,\n  close_out ,\n  close_out_noerr ,\n  set_binary_mode_out ,\n  open_in ,\n  open_in_bin ,\n  open_in_gen ,\n  input_char ,\n  input_line ,\n  input ,\n  really_input ,\n  really_input_string ,\n  input_byte ,\n  input_binary_int ,\n  input_value ,\n  seek_in ,\n  pos_in ,\n  in_channel_length ,\n  close_in ,\n  close_in_noerr ,\n  set_binary_mode_in ,\n  LargeFile ,\n  string_of_format ,\n  $caret$caret ,\n  exit ,\n  at_exit ,\n  valid_float_lexem ,\n  unsafe_really_input ,\n  do_at_exit ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}